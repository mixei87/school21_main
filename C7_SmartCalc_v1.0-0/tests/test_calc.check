#include <float.h>
#include <math.h>
#include "../reverse_polish_notation.h"

#tcase numbers
#test numbers1
  char* str = "1234567890";
  double std_result = 1234567890, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers2
  char* str = "103.3456";
  double std_result = 103.3456, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers3
  char* str = "-9.98128234789";
  double std_result = -9.98128234789, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers4
  char* str = "+0.0001234234";
  double std_result = 0.0001234234, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers5
  char* str = "1E3";
  double std_result = 1E3, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers6
  char* str = "123.3456E12";
  double std_result = 123.3456E12, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers7
  char* str = "000000.34234234";
  double std_result = 0.34234234, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers8
  char* str = "-234.234E-11";
  double std_result = -234.234E-11, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers9
  char* str = "334.234E+11";
  double std_result = 334.234E+11, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test numbers10
  char* str = "-234e13";
  double std_result = -234e13, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);

#tcase numbers_incorrect
#test numbers_incorrect1
  char* str = "123,89";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test numbers_incorrect2
  char* str = "-9.981.28234789";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test numbers_incorrect3
  char* str = "953E35E";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test numbers_incorrect4
  char* str = "E3";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test numbers_incorrect5
  char* str = "..3456E12";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test numbers_incorrect6
  char* str = " 3456E12";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test numbers_incorrect7
  char* str = "34 56E12";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);

#tcase simple_operation
#test simple_operation1
  char* str = "123.45+987.65";
  double std_result = 123.45+987.65, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation2
  char* str = "345.78798789-82348788324.234";
  double std_result = 345.78798789-82348788324.234, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation3
  char* str = "-9.98128234789+34890E2";
  double std_result = -9.98128234789+34890E2, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation4
  char* str = "-0.0000123-234234.2";
  double std_result = -0.0000123-234234.2, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation5
  char* str = "--3";
  double std_result = 0 - - 3, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation6
  char* str = "---++-+-+--+++35897.23";
  double std_result = - - - + + - + - + - - + + + 35897.23, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation7
  char* str = "(+-+0.34234234)";
  double std_result = (+-+0.34234234), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation8
  char* str = "9234.23*-289.3";
  double std_result = 9234.23*-289.3, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation9
  char* str = "-23.4*3242.2";
  double std_result = -23.4*3242.2, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation10
  char* str = "-234e13/68.58";
  double std_result = -234e13/68.58, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation11
  char* str = "123678.45mod987.65";
  double std_result = fmod(123678.45, 987.65), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation12
  char* str = "34242340.0000123mod-234234.2";
  double std_result = fmod(34242340.0000123, -234234.2), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation13
  char* str = "345.78798789^4.234";
  double std_result = pow(345.78798789, 4.234), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation14
  char* str = "-9.98128234789^-34890E-5";
  double std_result = pow(-9.98128234789, -34890E-5), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation15
  char* str = "sin345.092";
  double std_result = sin(345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation16
  char* str = "sin(-2942e23)";
  double std_result = sin(-2942e23), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation17
  char* str = "sin-3453.092";
  double std_result = sin(-3453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation18
  char* str = "cos8345.092";
  double std_result = cos(8345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation19
  char* str = "cos(-2942e-3)";
  double std_result = cos(-2942e-3), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation20
  char* str = "cos-83453.092";
  double std_result = cos(-83453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation21
  char* str = "tan345.092";
  double std_result = tan(345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation22
  char* str = "tan(-2942e23)";
  double std_result = tan(-2942e23), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation23
  char* str = "tan-3453.092";
  double std_result = tan(-3453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation24
  char* str = "asin8345.092";
  double std_result = asin(8345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation25
  char* str = "asin(-2942e-3)";
  double std_result = asin(-2942e-3), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation26
  char* str = "asin-83453.092";
  double std_result = asin(-83453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation27
  char* str = "asin-0.34";
  double std_result = asin(-0.34), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation28
  char* str = "asin0.974";
  double std_result = asin(0.974), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation29
  char* str = "acos8345.092";
  double std_result = acos(8345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation30
  char* str = "acos(-2942e-3)";
  double std_result = acos(-2942e-3), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation31
  char* str = "acos-83453.092";
  double std_result = acos(-83453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation32
  char* str = "acos-0.34";
  double std_result = acos(-0.34), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation33
  char* str = "acos0.974";
  double std_result = acos(0.974), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation34
  char* str = "atan8345.092";
  double std_result = atan(8345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation35
  char* str = "atan(-2942e-3)";
  double std_result = atan(-2942e-3), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation36
  char* str = "atan-83453.092";
  double std_result = atan(-83453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation37
  char* str = "atan-0.34";
  double std_result = atan(-0.34), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation38
  char* str = "atan0.974";
  double std_result = atan(0.974), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation39
  char* str = "sqrt8345.092";
  double std_result = sqrt(8345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation40
  char* str = "sqrt(-2942e-3)";
  double std_result = sqrt(-2942e-3), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation41
  char* str = "sqrt-83453.092";
  double std_result = sqrt(-83453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation42
  char* str = "sqrt-0.34";
  double std_result = sqrt(-0.34), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation43
  char* str = "sqrt0.974";
  double std_result = sqrt(0.974), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation44
  char* str = "ln8345.092";
  double std_result = log(8345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation45
  char* str = "ln(-2942e-3)";
  double std_result = log(-2942e-3), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation46
  char* str = "ln-83453.092";
  double std_result = log(-83453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation47
  char* str = "ln-0.34";
  double std_result = log(-0.34), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation48
  char* str = "ln0.974";
  double std_result = log(0.974), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation49
  char* str = "log8345.092";
  double std_result = log10(8345.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation50
  char* str = "log(-2942e-3)";
  double std_result = log10(-2942e-3), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation51
  char* str = "log-83453.092";
  double std_result = log10(-83453.092), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation52
  char* str = "log-0.34";
  double std_result = log10(-0.34), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation53
  char* str = "log0.974";
  double std_result = log10(0.974), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation54
  char* str = "-sin-7";
  double std_result = -sin(-7), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation55
  char* str = "(-1)^2";
  double std_result = pow(-1, 2), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation56
  char* str = "-(1^-2)";
  double std_result = -pow(1, -2), result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test simple_operation57
  char* str = "";
  double std_result = 0, result = 0, x = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);

#tcase operation_incorrect
#test operation_incorrect1
  char* str = "(3";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test operation_incorrect2
  char* str = ")";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);  
#test operation_incorrect3
  char* str = "456.34)";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect4
  char* str = "(456.34)*-234.234)";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect5
  char* str = "si3";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test operation_incorrect6
  char* str = "345modd89";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test operation_incorrect7
  char* str = "os90";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);  
#test operation_incorrect8
  char* str = "tn90";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect9
  char* str = "log10(24 87)";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect10
  char* str = "soc(342)";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect11
  char* str = "tan9,0";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect12
  char* str = "5**82";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect13
  char* str = "-234.234//234";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect14
  char* str = "23modmod34";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect15
  char* str = "45mod/234";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test operation_incorrect16
  char* str = "234^^23";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);
#test operation_incorrect17
  char* str = "34/*234";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error);  
#test operation_incorrect18
  char* str = "-9234^/234";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect19
  char* str = "786/^234";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect20
  char* str = "sfs7hd872h29h7";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 
#test operation_incorrect21
  char* str = "s89u9299ij/234s2";
  double result = 0, x = 0;
  int std_error = 1, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  ck_assert_int_eq(std_error, error); 

#tcase difficult

#test difficult1
  char* str = "-sin(89.345mod-8.432)*atan(0.5e-1)/45^-2x+(9cosln124-asin0.123"
  "/(sqrt(98.234+xmodlog18---tan-345x+acos0.32)))";
  double x = 68.523567567;
  double std_result = -sin(fmod(89.345, -8.432)) * atan(0.5e-1) / pow(45, -2) \
  * x + (9 * cos(log(124)) - asin(0.123) / (sqrt(98.234 + fmod(x, log10(18)) \
  - - - tan(-345) * x + acos(0.32)))), result = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test difficult2
  char* str = "atan(0.5e-1)/45^-2x";
  double x = -34.123;
  double std_result = atan(0.5e-1) / pow(45, -2) * x, result = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test difficult3
  char* str = "9cosln124-asin0.123";
  double x = -14.123;
  double std_result = 9 * cos(log(124)) - asin(0.123), result = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test difficult4
  char* str = "xmodlog18";
  double x = 3.123;
  double std_result = fmod(x, log10(18)), result = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test difficult5
  char* str = "sqrt(98.234+xmodlog18---tan-345x+acos0.32)";
  double x = -34.123;
  double std_result = sqrt(98.234 + fmod(x, log10(18)) - - - tan(-345) * x + acos(0.32)), result = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test difficult6
  char* str = "tan-345x+acos0.32";
  double x = -34.123;
  double std_result = tan(-345) * x + acos(0.32), result = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
#test difficult7
  char* str = "xmodlog18---tan-345x+acos0.32";
  double x = -34.123;
  double std_result = fmod(x, log10(18)) - - - tan(-345) * x + acos(0.32), result = 0;
  int std_error = 0, error = 0;
  StackOut *stack_output = NULL;
  error = calculateRPN(str, &stack_output, x, &result);
  removeStackOut(stack_output);
  if (std_result == std_result)
    ck_assert_double_eq_tol(std_result, result, 1E-7);
  else
    ck_assert_double_nan(result);
  ck_assert_int_eq(std_error, error);
